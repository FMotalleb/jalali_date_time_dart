// Mocks generated by Mockito 5.4.2 from annotations
// in jalali_date_time/test/jalali_date_time/jalali_date_time_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DateTime].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTime extends _i1.Mock implements DateTime {
  @override
  bool get isUtc => (super.noSuchMethod(
        Invocation.getter(#isUtc),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get millisecondsSinceEpoch => (super.noSuchMethod(
        Invocation.getter(#millisecondsSinceEpoch),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get microsecondsSinceEpoch => (super.noSuchMethod(
        Invocation.getter(#microsecondsSinceEpoch),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String get timeZoneName => (super.noSuchMethod(
        Invocation.getter(#timeZoneName),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Duration get timeZoneOffset => (super.noSuchMethod(
        Invocation.getter(#timeZoneOffset),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#timeZoneOffset),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.getter(#timeZoneOffset),
        ),
      ) as Duration);
  @override
  int get year => (super.noSuchMethod(
        Invocation.getter(#year),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get month => (super.noSuchMethod(
        Invocation.getter(#month),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get day => (super.noSuchMethod(
        Invocation.getter(#day),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get hour => (super.noSuchMethod(
        Invocation.getter(#hour),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get minute => (super.noSuchMethod(
        Invocation.getter(#minute),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get second => (super.noSuchMethod(
        Invocation.getter(#second),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get millisecond => (super.noSuchMethod(
        Invocation.getter(#millisecond),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get microsecond => (super.noSuchMethod(
        Invocation.getter(#microsecond),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get weekday => (super.noSuchMethod(
        Invocation.getter(#weekday),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool isBefore(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #isBefore,
          [other],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isAfter(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #isAfter,
          [other],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isAtSameMomentAs(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #isAtSameMomentAs,
          [other],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int compareTo(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #compareTo,
          [other],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  DateTime toLocal() => (super.noSuchMethod(
        Invocation.method(
          #toLocal,
          [],
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #toLocal,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.method(
            #toLocal,
            [],
          ),
        ),
      ) as DateTime);
  @override
  DateTime toUtc() => (super.noSuchMethod(
        Invocation.method(
          #toUtc,
          [],
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #toUtc,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.method(
            #toUtc,
            [],
          ),
        ),
      ) as DateTime);
  @override
  String toIso8601String() => (super.noSuchMethod(
        Invocation.method(
          #toIso8601String,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  DateTime add(Duration? duration) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [duration],
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #add,
            [duration],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.method(
            #add,
            [duration],
          ),
        ),
      ) as DateTime);
  @override
  DateTime subtract(Duration? duration) => (super.noSuchMethod(
        Invocation.method(
          #subtract,
          [duration],
        ),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.method(
            #subtract,
            [duration],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_1(
          this,
          Invocation.method(
            #subtract,
            [duration],
          ),
        ),
      ) as DateTime);
  @override
  Duration difference(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #difference,
          [other],
        ),
        returnValue: _FakeDuration_0(
          this,
          Invocation.method(
            #difference,
            [other],
          ),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.method(
            #difference,
            [other],
          ),
        ),
      ) as Duration);
}
